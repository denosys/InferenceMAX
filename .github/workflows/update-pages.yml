name: nightly-update-pages
on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_PAT: ${{ secrets.SECRET_PAT }}
      PUBLIC_PAGE: https://inferencemax.semianalysis.com
      ARTIFACTS_DIR: data_zips
      DOCS_DATA: docs/data
      NODE_VERSION: "20"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl ca-certificates fonts-liberation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Add puppeteer helper and scripts
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/fetch_page.js <<'NODEJS'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          (async () => {
            const url = process.argv[2];
            const out = process.argv[3] || '/tmp/im_public.html';
            if (!url) { console.error('Missing url'); process.exit(2); }
            const browser = await puppeteer.launch({ args: ['--no-sandbox','--disable-setuid-sandbox','--disable-dev-shm-usage'], headless: true });
            const page = await browser.newPage();
            await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });
            await page.waitForTimeout(1000);
            const html = await page.content();
            fs.writeFileSync(out, html);
            await browser.close();
            console.log('Saved rendered page to', out);
          })().catch(e => { console.error(e); process.exit(1); });
          NODEJS

          cat > .github/scripts/parse_runs.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          infile="$1"
          out="$2"
          grep -Eo 'https?://github.com/[^/]+/[^/]+/actions/runs/[0-9]+' "$infile" > "${out}.abs" || true
          grep -Eo '/[^/]+/[^/]+/actions/runs/[0-9]+' "$infile" | sed 's|^|https://github.com|' >> "${out}.abs" || true
          sort -u "${out}.abs" > "$out" || true
          echo "Parsed run list written to $out"
          SH

          cat > .github/scripts/download_artifacts.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          runs_file="$1"
          artifacts_dir="$2"
          docs_data="$3"
          secret_pat="$4"

          mkdir -p "$artifacts_dir" "$docs_data" /tmp/im_runs
          read -r -d '' ALLOWED <<'EOT' || true
          results_gptoss_1k1k.zip
          results_gptoss_8k1k.zip
          results_gptoss_1k8k.zip
          results_70b_1k1k.zip
          results_70b_8k1k.zip
          results_70b_1k8k.zip
          results_dsr1_1k1k.zip
          results_dsr1_8k1k.zip
          results_dsr1_1k8k.zip
          EOT

          is_allowed() {
            local name="$1"
            while IFS= read -r line; do
              [ "$line" = "$name" ] && return 0
            done <<< "$ALLOWED"
            return 1
          }

          AUTH_HDR="Authorization: token ${secret_pat}"

          while read -r run_url; do
            [ -z "$run_url" ] && continue
            owner=$(echo "$run_url" | awk -F'/' '{print $4}')
            repo=$(echo "$run_url" | awk -F'/' '{print $5}')
            run_id=$(echo "$run_url" | awk -F'/' '{print $NF}')
            echo "Processing run $run_id from $owner/$repo"

            api_url="https://api.github.com/repos/${owner}/${repo}/actions/runs/${run_id}/artifacts?per_page=200"
            tmp_art="/tmp/im_runs/artifacts_${run_id}.json"
            curl -sS -H "Accept: application/vnd.github+json" -H "$AUTH_HDR" "$api_url" -o "$tmp_art" || { echo "Failed to query artifacts for run $run_id"; continue; }

            if ! jq -e '.artifacts | length > 0' "$tmp_art" >/dev/null 2>&1; then
              echo " No artifacts for run $run_id"
              continue
            fi

            jq -c '.artifacts[]' "$tmp_art" | while read -r art; do
              art_id=$(echo "$art" | jq -r '.id')
              art_name=$(echo "$art" | jq -r '.name')
              norm_name="$art_name"
              case "$norm_name" in *.zip) ;; *) norm_name="${norm_name}.zip" ;; esac

              if ! is_allowed "$norm_name"; then
                echo " Skipping artifact not in allowed list: $art_name"
                continue
              fi

              archive_url=$(echo "$art" | jq -r '.archive_download_url')
              safe_name="${run_id}-${art_id}-${art_name}"
              out="${artifacts_dir}/${safe_name}.zip"

              echo " Downloading artifact $art_name from run $run_id"
              http_code=$(curl -sSL -w "%{http_code}" -H "Accept: application/vnd.github+json" -H "$AUTH_HDR" -o "$out" "$archive_url" || echo "000")
              if [ "$http_code" != "200" ] && [ "$http_code" != "302" ] && [ "$http_code" != "307" ]; then
                echo "  Warning: failed to download artifact $art_id (http $http_code)"
                rm -f "$out" || true
                continue
              fi

              if [ -s "$out" ] && unzip -t "$out" >/dev/null 2>&1; then
                tmpd=$(mktemp -d)
                unzip -q "$out" -d "$tmpd"
                find "$tmpd" -type f $ -name "agg_*.json" -o -name "*.json" -o -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" $ -print0 \
                  | while IFS= read -r -d '' f; do
                      dest=$(basename "$f" | sed -E 's/[^A-Za-z0-9._-]+/_/g')
                      cp -f "$f" "${docs_data}/${dest}"
                      echo "   -> extracted ${dest}"
                  done
                rm -rf "$tmpd"
              else
                echo "  Warning: artifact $out not a valid zip or empty"
              fi
            done
          done < "$runs_file"

          echo "Download step complete. Files in ${docs_data}:"
          ls -la "${docs_data}" || true
          SH

          chmod +x .github/scripts/*.sh

      - name: Install node deps (puppeteer)
        run: |
          npm init -y
          npm i puppeteer --no-audit --no-fund

      - name: Render public page with Puppeteer
        env:
          PUBLIC_PAGE: ${{ env.PUBLIC_PAGE }}
        run: |
          node .github/scripts/fetch_page.js "${PUBLIC_PAGE}" /tmp/im_public.html
          ls -la /tmp/im_public.html

      - name: Parse run links from rendered page
        run: |
          .github/scripts/parse_runs.sh /tmp/im_public.html /tmp/im_runs/list.txt
          echo "Run links:"
          cat /tmp/im_runs/list.txt || true

      - name: Download allowed artifacts from runs
        env:
          SECRET_PAT: ${{ env.SECRET_PAT }}
          ARTIFACTS_DIR: ${{ env.ARTIFACTS_DIR }}
          DOCS_DATA: ${{ env.DOCS_DATA }}
        run: |
          .github/scripts/download_artifacts.sh /tmp/im_runs/list.txt "${ARTIFACTS_DIR}" "${DOCS_DATA}" "${SECRET_PAT}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install python deps
        run: pip install --upgrade pip && pip install pandas plotly

      - name: Generate HTML
        run: |
          set -euo pipefail
          mkdir -p docs data_zips
          python3 -u generate_html.py || true
          find docs -maxdepth 2 -type f -print || true
          ls -la docs/data || true

      - name: Commit and push generated site
        run: |
          set -euo pipefail
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/${{ github.repository }}.git
          git add docs || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "nightly: update pages and data"
            git push origin HEAD
          fi
