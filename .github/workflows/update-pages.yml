name: nightly-update-pages
on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: write

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Use absolute paths based on GITHUB_WORKSPACE to avoid relative/empty-var issues
      OUT_DIR: ${{ github.workspace }}/docs
      ARTIFACTS_DIR: ${{ github.workspace }}/data_zips
      DOCS_DATA: ${{ github.workspace }}/docs/data
      SECRET_PAT: ${{ secrets.SECRET_PAT }}
      PUBLIC_PAGE: https://inferencemax.semianalysis.com
      NODE_VERSION: "20"
      PYTHON_VERSION: "3.11"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl ca-certificates fonts-liberation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Add helper scripts
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/fetch_page.js <<'NODEJS'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }
          (async () => {
            const url = process.argv[2];
            const out = process.argv[3] || '/tmp/im_public.html';
            if (!url) { console.error('Missing url'); process.exit(2); }
            const browser = await puppeteer.launch({
              args: ['--no-sandbox','--disable-setuid-sandbox','--disable-dev-shm-usage'],
              headless: true
            });
            try {
              const page = await browser.newPage();
              await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });
              await sleep(1000);
              const html = await page.content();
              fs.writeFileSync(out, html);
              console.log('Saved rendered page to', out);
              await browser.close();
              process.exit(0);
            } catch (e) {
              console.error('Rendering failed:', e);
              try { await browser.close(); } catch {}
              process.exit(1);
            }
          })();
          NODEJS
          cat > .github/scripts/parse_runs.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          infile="$1"
          out="$2"
          mkdir -p "$(dirname "$out")" /tmp/im_runs
          tmp_out="${out}.abs"
          : > "$tmp_out"
          grep -Eo 'https?://github.com/[^/]+/[^/]+/actions/runs/[0-9]+' "$infile" >> "$tmp_out" || true
          grep -Eo '/[^/]+/[^/]+/actions/runs/[0-9]+' "$infile" | sed 's|^|https://github.com|' >> "$tmp_out" || true
          sort -u "$tmp_out" > "$out"
          echo "Parsed run list written to $out"
          SH
          cat > .github/scripts/download_artifacts.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          # Usage: download_artifacts.sh <runs_file> <artifacts_dir> <docs_data> <secret_pat> <out_dir>
          runs_file="${1:-}"
          artifacts_dir="${2:-}"
          docs_data="${3:-}"
          secret_pat="${4:-}"
          out_dir="${5:-}"

          if [ -z "$runs_file" ] || [ -z "$artifacts_dir" ] || [ -z "$docs_data" ] || [ -z "$secret_pat" ]; then
            echo "Usage: $0 <runs_file> <artifacts_dir> <docs_data> <secret_pat> [out_dir]"
            exit 2
          fi

          # Normalize outs
          artifacts_dir="${artifacts_dir%/}"
          docs_data="${docs_data%/}"
          out_dir="${out_dir%/}"

          mkdir -p "$artifacts_dir" "$docs_data" /tmp/im_runs
          if [ -n "$out_dir" ]; then
            mkdir -p "$out_dir"
          fi

          read -r -d '' ALLOWED <<'EOT' || true
          results_gptoss_1k1k.zip
          results_gptoss_8k1k.zip
          results_gptoss_1k8k.zip
          results_70b_1k1k.zip
          results_70b_8k1k.zip
          results_70b_1k8k.zip
          results_dsr1_1k1k.zip
          results_dsr1_8k1k.zip
          results_dsr1_1k8k.zip
          EOT

          is_allowed() {
            local name="$1"
            while IFS= read -r line; do
              [ "$line" = "$name" ] && return 0
            done <<< "$ALLOWED"
            return 1
          }

          AUTH_HDR="Authorization: token ${secret_pat}"

          fetch_all_artifacts_for_run() {
            local owner="$1" repo="$2" run_id="$3" out_json="$4"
            : > "$out_json"
            local page=1
            while :; do
              api_url="https://api.github.com/repos/${owner}/${repo}/actions/runs/${run_id}/artifacts?per_page=100&page=${page}"
              tmp="$(mktemp)"
              http_code=$(curl -sS -w "%{http_code}" -H "Accept: application/vnd.github+json" -H "$AUTH_HDR" "$api_url" -o "$tmp") || http_code="000"
              if [ "$http_code" != "200" ]; then
                echo "  Warning: API request failed for page ${page} (http ${http_code})"
                rm -f "$tmp"
                break
              fi
              jq -c '.artifacts[]' "$tmp" >> "$out_json"
              link_hdr=$(curl -sI -H "Accept: application/vnd.github+json" -H "$AUTH_HDR" "$api_url" | tr -d '\r' | sed -n 's/^Link: //Ip' || true)
              rm -f "$tmp"
              if echo "$link_hdr" | grep -q 'rel="next"'; then
                page=$((page+1))
                continue
              else
                break
              fi
            done
          }

          # MAIN loop
          while IFS= read -r run_url || [ -n "$run_url" ]; do
            [ -z "$run_url" ] && continue
            owner=$(echo "$run_url" | awk -F'/' '{print $4}')
            repo=$(echo "$run_url" | awk -F'/' '{print $5}')
            run_id=$(echo "$run_url" | awk -F'/' '{print $NF}')
            echo "Processing run $run_id from $owner/$repo"
            tmp_art="/tmp/im_runs/artifacts_${run_id}.ndjson"
            rm -f "$tmp_art"
            fetch_all_artifacts_for_run "$owner" "$repo" "$run_id" "$tmp_art"
            if [ ! -s "$tmp_art" ]; then
              echo " No artifacts for run $run_id"
              continue
            fi
            while IFS= read -r art; do
              art_id=$(echo "$art" | jq -r '.id')
              art_name=$(echo "$art" | jq -r '.name')
              norm_name="$art_name"
              case "$norm_name" in *.zip) ;; *) norm_name="${norm_name}.zip" ;; esac
              if ! is_allowed "$norm_name"; then
                echo " Skipping artifact not in allowed list: $art_name"
                continue
              fi
              archive_url=$(echo "$art" | jq -r '.archive_download_url')
              safe_name="${run_id}-${art_id}-${art_name}"
              out="${artifacts_dir}/${safe_name}.zip"
              echo " Downloading artifact $art_name from run $run_id -> $out"
              http_code=$(curl -sSL -w "%{http_code}" -H "Accept: application/vnd.github+json" -H "$AUTH_HDR" -o "$out" "$archive_url" || echo "000")
              if [ "$http_code" != "200" ] && [ "$http_code" != "302" ] && [ "$http_code" != "307" ]; then
                echo "  Warning: failed to download artifact $art_id (http $http_code)"
                rm -f "$out" || true
                continue
              fi
              if [ -s "$out" ] && unzip -t "$out" >/dev/null 2>&1; then
                tmpd=$(mktemp -d)
                unzip -q "$out" -d "$tmpd"
                find "$tmpd" -type f -name "agg_*.json" -o -name "*.json" -o -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -print0 \
                  | while IFS= read -r -d '' f; do
                      dest=$(basename "$f" | sed -E 's/[^A-Za-z0-9._-]+/_/g')
                      cp -f "$f" "${docs_data}/${dest}"
                      echo "   -> extracted ${dest} to ${docs_data}/"
                  done
                rm -rf "$tmpd"
              else
                echo "  Warning: artifact $out not a valid zip or empty"
              fi
            done < "$tmp_art"
          done < "$runs_file"

          # GLOBAL post-process (conservative behavior)
          docs_data="${docs_data%/}"
          older_dir="${out_dir:-}${out_dir:+/}older"
          mkdir -p "$older_dir"
          echo "Docs data: $docs_data"
          echo "Older dir: $older_dir"
          # Build stable list of files
          mapfile -t allfiles < <(find "$docs_data" -maxdepth 1 -type f -printf '%P\n' | sort)
          declare -A best_for_subtype
          declare -A best_run
          declare -A best_artid
          non_prefixed_files=()

          parse_prefixed() {
            local bn="$1"
            if [[ "$bn" =~ ^([0-9]+)-([0-9]+)-(.+)$ ]]; then
              printf '%s\t%s\t%s' "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}"
              return 0
            fi
            return 1
          }

          for bn in "${allfiles[@]}"; do
            f="${docs_data}/${bn}"
            if parsed=$(parse_prefixed "$bn" 2>/dev/null); then
              IFS=$'\t' read -r run artid namepart <<< "$parsed"
              subtype=$(printf '%s' "$namepart" | sed -E 's/__agg_.*$//' | sed -E 's/\.[^.]+$//')
              run=${run:-0}; artid=${artid:-0}
              prev_run=${best_run[$subtype]:--1}
              prev_art=${best_artid[$subtype]:-0}
              if (( run > prev_run )) || { (( run == prev_run )) && (( artid > prev_art )); }; then
                best_run[$subtype]="$run"
                best_artid[$subtype]="$artid"
                best_for_subtype[$subtype]="$f"
              fi
            else
              non_prefixed_files+=("$f")
            fi
          done

          # Move older prefixed files (keep best)
          for bn in "${allfiles[@]}"; do
            f="${docs_data}/${bn}"
            if parse_prefixed "$bn" >/dev/null 2>&1; then
              keep_this=0
              for s in "${!best_for_subtype[@]}"; do
                [ "${best_for_subtype[$s]}" = "$f" ] && keep_this=1 && break
              done
              if [ "$keep_this" -eq 1 ]; then
                echo "Keeping prefixed file: ${bn}"
              else
                echo "Moving older prefixed file: ${bn} -> ${older_dir}/"
                mv -v "$f" "${older_dir}/" || echo " Failed to move $f"
              fi
            fi
          done

          # Delete non-prefixed files (conservative: list them in diagnostics before deleting)
          for f in "${non_prefixed_files[@]:-}"; do
            bn=$(basename "$f")
            echo "Deleting non-prefixed file: ${bn}"
            rm -f "$f" || echo " Failed to delete $f"
          done

          echo "Global post-process complete. Kept files:"
          for s in "${!best_for_subtype[@]}"; do
            echo "  - $(basename "${best_for_subtype[$s]}")"
          done
          SH
          chmod +x .github/scripts/*.sh

      - name: Install node deps (puppeteer)
        run: |
          npm init -y
          npm i puppeteer --no-audit --no-fund

      - name: Render public page with Puppeteer
        env:
          PUBLIC_PAGE: ${{ env.PUBLIC_PAGE }}
        run: |
          node .github/scripts/fetch_page.js "${PUBLIC_PAGE}" /tmp/im_public.html
          ls -la /tmp/im_public.html || true

      - name: Parse run links from rendered page
        run: |
          .github/scripts/parse_runs.sh /tmp/im_public.html /tmp/im_runs/list.txt
          echo "Run links:"
          sed -n '1,200p' /tmp/im_runs/list.txt || true

      - name: Download allowed artifacts from runs
        env:
          SECRET_PAT: ${{ env.SECRET_PAT }}
          ARTIFACTS_DIR: ${{ env.ARTIFACTS_DIR }}
          DOCS_DATA: ${{ env.DOCS_DATA }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          echo "DEBUG env: OUT_DIR=$OUT_DIR ARTIFACTS_DIR=$ARTIFACTS_DIR DOCS_DATA=$DOCS_DATA"
          mkdir -p "$ARTIFACTS_DIR" "$DOCS_DATA" "$OUT_DIR"
          .github/scripts/download_artifacts.sh /tmp/im_runs/list.txt "$ARTIFACTS_DIR" "$DOCS_DATA" "$SECRET_PAT" "$OUT_DIR"
          echo "After download:"
          ls -la "$ARTIFACTS_DIR" || true
          ls -la "$DOCS_DATA" || true
          echo "Count docs/data:" $(find "$DOCS_DATA" -maxdepth 1 -type f | wc -l) || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install python deps
        run: pip install --upgrade pip && pip install pandas plotly

      - name: Run HTML generator (idempotent)
        run: |
          python3 -u generate_html.py || true
          ls -la "$OUT_DIR" || true
          ls -la "$DOCS_DATA" || true

      - name: Commit and push generated site
        run: |
          set -euo pipefail
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/${{ github.repository }}.git
          git add docs || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "nightly: update pages and data"
            git push origin HEAD
          fi
